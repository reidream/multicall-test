import json
from web3 import Web3
with open ("test_abi.json") as file:
    test_abi = json.load(file)
w3 = Web3(Web3.HTTPProvider("arb1.arbitrum.io/rpc"))
#uniswap arbのコントラクトです
contract = w3.eth.contract(address="0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45", abi=test_abi)

# トークンアドレス定義
USDC = "0xaf88d065e77c8cC2239327C5EDb3A432268e5831"
WETH = "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1"

fee = 500  # ETH/USDCペアには0.05%を使用
byte_usdc = w3.to_bytes(hexstr=USDC)
byte_fee = fee.to_bytes(3, 'big')
byte_weth = w3.to_bytes(hexstr=WETH)
data = byte_usdc + byte_fee + byte_weth

params = {
   'path': data,
   'recipient': '0x8bed0eCED8b89541AA5A95357fDd589aCF24579C',
   'amountIn': 1000,  # 0.01 USDC
   'amountOutMinimum': 0  # テスト用に最小出力額を0に設定
}

encoded_exactInput = contract.encodeABI(fn_name="exactInput", args=[params])
 #2: unwrapWETH9関数のエンコード
encoded_unwrapWETH9 = contract.encodeABI(fn_name="unwrapWETH9", args=[params["amountOutMinimum"]])

# マルチコールデータの作成
multicall_data = [encoded_exactInput, encoded_unwrapWETH9]
multicall = contract.encodeABI(fn_name="multicall", args=[multicall_data])
print(multicall)
#結果　僕のアドレスの送ってしまうので注意！
result = "0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000104b858183f000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000800000000000000000000000008bed0eced8b89541aa5a95357fdd589acf24579c00000000000000000000000000000000000000000000000000000000000003e80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002baf88d065e77c8cc2239327c5edb3a432268e58310001f482af49447d8a07e3bd95bd0d56f35241523fbab100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002449616997000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
